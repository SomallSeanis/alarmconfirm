server:
  port: 8082
spring:
  application:
    name: alarm-confirm
  datasource:
    hikari:
      jdbc-url: jdbc:sqlserver://10.50.238.161:1433;DatabaseName=Alarm
      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
      username: sa
      password: 1IllI1|1Il
      minimum-idle: 29
      maximum-pool-size: 58
      auto-commit: true
      idle-timeout: 0
      pool-name: DatebookHikariCP
      max-lifetime: 1800000
      connection-timeout: 10000
  redis:
    lettuce:
      pool:
        max-active: 880
        max-idle: 880
        min-idle: 880
        max-wait: 100
    cluster:
      nodes: 10.50.238.174:6379,10.50.238.170:6379,10.50.238.144:6379,10.50.238.169:6379,10.50.238.162:6379
      max-redirects: 3
    timeout: 5000

    # 自定义本地redis单机版配置（超超redis密码）
    local:
      host: 127.0.0.1
      port: 6379
      password: 123456

#  #============== kafka ===================
#  kafka:
#    # 指定kafka server的地址，集群配多个，中间，逗号隔开  #10.28.3.51:9092,10.28.3.52:9092,10.28.3.53:9092
#    bootstrap-servers:
#    #=============== consumer  =======================
#    consumer:
#      ## 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
#      group-id:
#      #  # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
#      auto-offset-reset: latest
#      #  # enable.auto.commit:true --> 设置自动提交offset
#      enable-auto-commit: true
#      #  #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
#      auto-commit-interval: 1000
#      #  # 指定消息key和消息体的编解码方式
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    #=============== provider  =======================
#    producer:
#      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
#      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失
#      retries: 0
#      ## 指定消息key和消息体的编解码方式
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      ##acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#      ##acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#      ##acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#      ##可以设置的值为：all, -1, 0, 1
#      acks: 1


#  # nacos 配置
#  cloud:
#    nacos:
#      discovery:
#        server-addr:
#
